// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: pb/signupsvc/v1/signupsvc.pb.go

package mock

import (
	context "context"
	sync "sync"

	github_com_stkr89_livegig_common_pb_signupsvc_v1 "github.com/stkr89/livegig-common/pb/signupsvc/v1"
	google_golang_org_grpc "google.golang.org/grpc"
)

// MockSignUpSvcClient is a mock of SignUpSvcClient interface
type MockSignUpSvcClient struct {
	lockSignUp sync.Mutex
	SignUpFunc func(ctx context.Context, in *github_com_stkr89_livegig_common_pb_signupsvc_v1.SignUpRequest, opts ...google_golang_org_grpc.CallOption) (*github_com_stkr89_livegig_common_pb_signupsvc_v1.SignUpResponse, error)

	calls struct {
		SignUp []struct {
			Ctx  context.Context
			In   *github_com_stkr89_livegig_common_pb_signupsvc_v1.SignUpRequest
			Opts []google_golang_org_grpc.CallOption
		}
	}
}

// SignUp mocks base method by wrapping the associated func.
func (m *MockSignUpSvcClient) SignUp(ctx context.Context, in *github_com_stkr89_livegig_common_pb_signupsvc_v1.SignUpRequest, opts ...google_golang_org_grpc.CallOption) (*github_com_stkr89_livegig_common_pb_signupsvc_v1.SignUpResponse, error) {
	m.lockSignUp.Lock()
	defer m.lockSignUp.Unlock()

	if m.SignUpFunc == nil {
		panic("mocker: MockSignUpSvcClient.SignUpFunc is nil but MockSignUpSvcClient.SignUp was called.")
	}

	call := struct {
		Ctx  context.Context
		In   *github_com_stkr89_livegig_common_pb_signupsvc_v1.SignUpRequest
		Opts []google_golang_org_grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}

	m.calls.SignUp = append(m.calls.SignUp, call)

	return m.SignUpFunc(ctx, in, opts...)
}

// SignUpCalled returns true if SignUp was called at least once.
func (m *MockSignUpSvcClient) SignUpCalled() bool {
	m.lockSignUp.Lock()
	defer m.lockSignUp.Unlock()

	return len(m.calls.SignUp) > 0
}

// SignUpCalls returns the calls made to SignUp.
func (m *MockSignUpSvcClient) SignUpCalls() []struct {
	Ctx  context.Context
	In   *github_com_stkr89_livegig_common_pb_signupsvc_v1.SignUpRequest
	Opts []google_golang_org_grpc.CallOption
} {
	m.lockSignUp.Lock()
	defer m.lockSignUp.Unlock()

	return m.calls.SignUp
}

// Reset resets the calls made to the mocked methods.
func (m *MockSignUpSvcClient) Reset() {
	m.lockSignUp.Lock()
	m.calls.SignUp = nil
	m.lockSignUp.Unlock()
}
