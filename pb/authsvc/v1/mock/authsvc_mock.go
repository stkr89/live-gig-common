// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: pb/authsvc/v1/authsvc.pb.go

package mock

import (
	context "context"
	sync "sync"

	github_com_stkr89_livegig_common_pb_authsvc_v1 "github.com/stkr89/livegig-common/pb/authsvc/v1"
	google_golang_org_grpc "google.golang.org/grpc"
)

// MockAuthSvcClient is a mock of AuthSvcClient interface
type MockAuthSvcClient struct {
	lockSignUp sync.Mutex
	SignUpFunc func(ctx context.Context, in *github_com_stkr89_livegig_common_pb_authsvc_v1.SignUpRequest, opts ...google_golang_org_grpc.CallOption) (*github_com_stkr89_livegig_common_pb_authsvc_v1.SignUpResponse, error)

	lockSignIn sync.Mutex
	SignInFunc func(ctx context.Context, in *github_com_stkr89_livegig_common_pb_authsvc_v1.SignInRequest, opts ...google_golang_org_grpc.CallOption) (*github_com_stkr89_livegig_common_pb_authsvc_v1.SignInResponse, error)

	calls struct {
		SignUp []struct {
			Ctx  context.Context
			In   *github_com_stkr89_livegig_common_pb_authsvc_v1.SignUpRequest
			Opts []google_golang_org_grpc.CallOption
		}
		SignIn []struct {
			Ctx  context.Context
			In   *github_com_stkr89_livegig_common_pb_authsvc_v1.SignInRequest
			Opts []google_golang_org_grpc.CallOption
		}
	}
}

// SignUp mocks base method by wrapping the associated func.
func (m *MockAuthSvcClient) SignUp(ctx context.Context, in *github_com_stkr89_livegig_common_pb_authsvc_v1.SignUpRequest, opts ...google_golang_org_grpc.CallOption) (*github_com_stkr89_livegig_common_pb_authsvc_v1.SignUpResponse, error) {
	m.lockSignUp.Lock()
	defer m.lockSignUp.Unlock()

	if m.SignUpFunc == nil {
		panic("mocker: MockAuthSvcClient.SignUpFunc is nil but MockAuthSvcClient.SignUp was called.")
	}

	call := struct {
		Ctx  context.Context
		In   *github_com_stkr89_livegig_common_pb_authsvc_v1.SignUpRequest
		Opts []google_golang_org_grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}

	m.calls.SignUp = append(m.calls.SignUp, call)

	return m.SignUpFunc(ctx, in, opts...)
}

// SignUpCalled returns true if SignUp was called at least once.
func (m *MockAuthSvcClient) SignUpCalled() bool {
	m.lockSignUp.Lock()
	defer m.lockSignUp.Unlock()

	return len(m.calls.SignUp) > 0
}

// SignUpCalls returns the calls made to SignUp.
func (m *MockAuthSvcClient) SignUpCalls() []struct {
	Ctx  context.Context
	In   *github_com_stkr89_livegig_common_pb_authsvc_v1.SignUpRequest
	Opts []google_golang_org_grpc.CallOption
} {
	m.lockSignUp.Lock()
	defer m.lockSignUp.Unlock()

	return m.calls.SignUp
}

// SignIn mocks base method by wrapping the associated func.
func (m *MockAuthSvcClient) SignIn(ctx context.Context, in *github_com_stkr89_livegig_common_pb_authsvc_v1.SignInRequest, opts ...google_golang_org_grpc.CallOption) (*github_com_stkr89_livegig_common_pb_authsvc_v1.SignInResponse, error) {
	m.lockSignIn.Lock()
	defer m.lockSignIn.Unlock()

	if m.SignInFunc == nil {
		panic("mocker: MockAuthSvcClient.SignInFunc is nil but MockAuthSvcClient.SignIn was called.")
	}

	call := struct {
		Ctx  context.Context
		In   *github_com_stkr89_livegig_common_pb_authsvc_v1.SignInRequest
		Opts []google_golang_org_grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}

	m.calls.SignIn = append(m.calls.SignIn, call)

	return m.SignInFunc(ctx, in, opts...)
}

// SignInCalled returns true if SignIn was called at least once.
func (m *MockAuthSvcClient) SignInCalled() bool {
	m.lockSignIn.Lock()
	defer m.lockSignIn.Unlock()

	return len(m.calls.SignIn) > 0
}

// SignInCalls returns the calls made to SignIn.
func (m *MockAuthSvcClient) SignInCalls() []struct {
	Ctx  context.Context
	In   *github_com_stkr89_livegig_common_pb_authsvc_v1.SignInRequest
	Opts []google_golang_org_grpc.CallOption
} {
	m.lockSignIn.Lock()
	defer m.lockSignIn.Unlock()

	return m.calls.SignIn
}

// Reset resets the calls made to the mocked methods.
func (m *MockAuthSvcClient) Reset() {
	m.lockSignUp.Lock()
	m.calls.SignUp = nil
	m.lockSignUp.Unlock()
	m.lockSignIn.Lock()
	m.calls.SignIn = nil
	m.lockSignIn.Unlock()
}
